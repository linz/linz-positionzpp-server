# Configuration file for PositionzPP processor
#
#  This will be processed using the Config::General module using the LowerCaseNames 
#  option.

#  my %config=ParseConfig(-ConfigFile=>$filename,-LowerCaseNames=>1,-InterPolateEnv=>1);
# 

PnzServerData /var/lib/positionzpp
PnzServerInterface /var/lib/positionzpp/interface
PnzServerLogs /var/log/positionzpp
PnzServerConf /etc/positionzpp

# Directories for managing the server instances

ServerLockDir ${PnzServerData}/locks
ServerStatusDir ${PnzServerData}/status
ServerDataDir ${PnzServerData}/data

# Hook script - used to manage file transfers.  If this is defined and is an
# executable file then it will be called in three ways
#
# script prerun <input_dir>
# script postupdate <update_file>
# script postrefdata <refdata_file>
#
# The first is called before a server starts, the second for each new results file 
# generated, and the last for each new refdata file generated
#

HookScript /opt/positionzpp/positionzpp_hook

# Directories for maintaining job status information and compiling results

WorkDir ${PnzServerData}/work
JobDir [jobid]
StatusFile status.json

# Directory for report templates

TemplateDir ${PnzServerConf}/report_templates

# Directories for bernese processing
# Note: The user directory is per server.  The data directory is shared as jobs may
# persist between server runs (waiting for data), so may be picked up by another server
# later.

BernDataDir ${PnzServerData}/berndata
BernUserDir ${PnzServerData}/bernuser/S[serverid]
BernUserTemplate ${PnzServerConf}/user_template

# Directories for interfacing with front end processor
# These can contain {xxx} for environment variables
# [jobid] for the job id
# [version] for the results version

InputDir ${PnzServerInterface}/input
OutputDir ${PnzServerInterface}/output
RefDataDir ${PnzServerInterface}/refdata

InputJobFile [jobid]-input.zip
OutputJobFile [jobid]-output[version].zip

InputControlFile jobdata.json
OutputControlFile results.json

# Directory for holding old input jobs for review
# and retention period in days
# ArchiveBern set to archive Bern output information, and should be one of 
# all, output (OUT and BPE directories), a / separated list of directories,
# or none

ArchiveBerneseDir ${PnzServerData}/archive/bernese
ArchiveInputDir   ${PnzServerData}/archive/input
ArchiveJobJsonDir ${PnzServerData}/archive/jobjson

ArchiveBerneseFile [bernid]_bernese.zip
ArchiveJobJsonFile [jobid]_status.json

ArchiveBerneseRetentionDays 30
ArchiveJobJsonRetentionDays 30
ArchiveInputRetentionDays 30

ArchiveInputData 1
ArchiveJobJson 1
ArchiveBerneseSuccess OUT/BPE/SOL
ArchiveBerneseSuccessDelete OUT/*.RES OUT/*.PHG
ArchiveBerneseFail all
ArchiveBerneseFailDelete none

# Keep Bernese jobs - should be 0 unless debugging

KeepBerneseCampaign 0

# Lock file name - file used to prevent two processes working on the same job
# The expiry is in seconds - it is assumed that any job lasting longer than this will have 
# got stuck or died.

LockFile pnzlock
LockFileExpiry 3600

# GNSS reference data files

GnssRefDataFile ${RefDataDir}/gpsdata.json
GnssUsageDataFile ${ServerDataDir}/gpsusage.json

###################################################################
## Files to send to the user
#
#  File names can include:
#    [cccc]     the mark id 
#    [ssss]     the session id
#    [jobid]    the job id
#    [subjob]   the bern subjob id
#    [bernid]   the bernese job id
#    [file]     the source file name

TeqcBin /usr/bin/teqc
TeqcUserParams +metadata
TeqcRefParams +metadata

<ReportFiles>
  <ReportFile>
     source SOL/FIN[ssss].SNX
     output final_[cccc]_[subjob].snx
     description SINEX file of final coordinate calculation for [cccc] ([file])
  </ReportFile>
  <ReportFile>
     source SOL/MIN[ssss].SNX
     output min_[cccc]_[subjob].snx
     description SINEX file of minimum constraints calculation for [cccc] ([file])
  </ReportFile>
  <ReportFile>
     source teqc
     output rinex_files_[subjob].txt
     description Summary information from RINEX files in the calculation for [cccc] ([file])
  </ReportFile>
</ReportFiles>

<SummaryReports>
   <SummaryReport>
       require success
       filename readme.txt
       template ${TemplateDir}/Readme.template
       description Information about these results
   </SummaryReport>
   <SummaryReport>
       require success
       filename coordinates.csv
       template ${TemplateDir}/CoordCsv.template
       description Summary of calculated coordinates (CSV format)
   </SummaryReport>
   <SummaryReport>
       require success
       filename nzgd2000.csv
       template ${TemplateDir}/NZGD2000Csv.template
       description NZGD2000 coordinates in different coordinate systems (CSV format)
   </SummaryReport>
   <SummaryReport>
       require success
       filename [jobid].kml
       template ${TemplateDir}/KmlFile.template
       description KML file for plotting the marks and baselines used in this job
   </SummaryReport>
</SummaryReports>

###################################################################
# Template for head of processing job

SummaryTemplate ${TemplateDir}/Summary.template

###################################################################
# Template used to present the results for one processing job

CompleteReportTemplate ${TemplateDir}/CompleteReport.template

###################################################################
# Template used to present the results for one processing job

WaitReportTemplate ${TemplateDir}/WaitReport.template

###################################################################
# Template used for jobs that have failed

FailedReportTemplate ${TemplateDir}/FailedReport.template


###################################################################
# Statistical summary logs 
# Record information from bernese runs...

LogStatisticsDir ${PnzServerData}/statistics
SuccessStatisticsFile positionzpp-stats-${year}${month}.csv
FailStatisticsFile positionzpp-failstats-${year}${month}.csv

SuccessStatisticsHeader ${TemplateDir}/SuccessStatisticsHeader.template

SuccessStatisticsRow ${TemplateDir}/SuccessStatisticsRow.template

FailStatisticsHeader ${TemplateDir}/FailStatisticsHeader.template

FailStatisticsRow ${TemplateDir}/FailStatisticsRow.template

#############################################################################
# Error notification email details...

SmtpServer linzsmtp
NotificationEmailFrom bern_server@linz.govt.nz
NotificationEmailTo positionz@linz.govt.nz
NotificationEmailTitle PositioNZ-PP job failure: [bernid] 
NotificationEmailTemplate  ${TemplateDir}/NotificationEmail.template

# LogSettings: The logging for the Product Manager. These must follow log4perl
# config rules.

LogDir ${PnzServerLogs}
LogFile positionzpp-${year}${month}.log
LogFileRetention 365

LogSettings <<EOF
 log4perl.logger                                    = INFO,Logfile
# ##############################################################################
# # Config for the STDOUT Appender
# ##############################################################################
# log4perl.appender.Screen                           = Log::Log4perl::Appender::Screen
# log4perl.appender.Screen.layout                    = Log::Log4perl::Layout::PatternLayout
# log4perl.appender.Screen.stderr                    = 0
# log4perl.appender.Screen.layout.ConversionPattern  = %d %p> %F{1}:%L - %m%n
# ##############################################################################
# # Config for the Log file Appender [logfilename] replaced by loader script
# ##############################################################################
log4perl.appender.Logfile                          = Log::Log4perl::Appender::File
log4perl.appender.Logfile.filename                 = [logfilename]
log4perl.appender.Logfile.mode                     = append
log4perl.appender.Logfile.umask                    = 0002
log4perl.appender.Logfile.layout                   = Log::Log4perl::Layout::PatternLayout
log4perl.appender.Logfile.layout.ConversionPattern = %d %p> %F{1}:%L - %m%n
log4perl.appender.Logfile.TZ                       = NZDT
EOF
